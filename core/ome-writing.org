#+TITLE: Oh My Emacs Writing
#+OPTIONS: toc:nil num:nil ^:nil

This is part of the [[https://github.com/xiaohanyu/oh-my-emacs][oh-my-emacs]].

This file contains some packages for document writing.

* Prerequisites
  :PROPERTIES:
  :CUSTOM_ID: ome-writing-prerequisites
  :END:

#+NAME: ome-writing-prerequisites
#+CAPTION: Prerequisites for ome-writing module
|          | Windows | Ubuntu/Debian/Mint | ArchLinux | Fedora | Mac OS X | Mandatory? |
|----------+---------+--------------------+-----------+--------+----------+------------|
| [[http://daringfireball.net/projects/markdown/][markdown]] |         | markdown           |           |        |          | No         |

* El-get packages
  :PROPERTIES:
  :CUSTOM_ID: writing-el-get-packages
  :END:

#+NAME: writing-el-get-packages
#+CAPTION: El-get packages for ome-writing module
|               | Status   | Description                                          |
|---------------+----------+------------------------------------------------------|
| [[http://jblevins.org/projects/markdown-mode/][markdown-mode]] | Required | Markdown is so popular that this package is required |

* Markdown
  :PROPERTIES:
  :CUSTOM_ID: markdown
  :END:

[[http://en.wikipedia.org/wiki/Markdown][Markdown]] is a lightweight markup language, which is very popular as a doc
writing format in many popular open source projects.

[[https://github.com/thierryvolpiatto/markdown-pp][markdown-pp]] is a preprocessor for Markdown files to generate a table of
contents and other documentation needs, so I add "mdpp" file to
markdown-mode's auto-mode-alist.

[[http://jblevins.org/projects/markdown-mode/][markdown-mode]] also support html export. Under the hood, it adopts the original
[[file://home/xiao/downloads/Markdown_1.0.1.zip][markdown]] perl script to do the heavy job. So you need to install it before
=markdown-export=.

The author of [[http://jblevins.org/projects/markdown-mode/][markdown-mode]], [[http://jblevins.org/][Jason Blevins]], is an assistant professor of
economics at the ohio state university, who maintains a lot of open source
[[http://jblevins.org/projects/][softwares]], which is amazing.

#+NAME: markdown
#+BEGIN_SRC emacs-lisp
(defun ome-markdown-mode-setup ()
  (add-to-list 'auto-mode-alist
               '("\\.mdpp" . markdown-mode)))

(ome-install 'markdown-mode)
#+END_SRC

* dictem
  :PROPERTIES:
  :CUSTOM_ID: dictem
  :END:
  Dictem is a dictd interface neatly integrated into emacs, you can install
  your own server and databases via apt-get, there are a bunch of them,
  including translation to-from many languages, its something very valuable to
  learn new words i think, and emacs comes to the rescue

#+BEGIN_SRC emacs-lisp

(defun ome-dictem-setup ()
(add-hook 'dictem-postprocess-match-hook
          'dictem-postprocess-match)

;; For highlighting the separator between the definitions found.
;; This also creates hyperlink on database names.
(add-hook 'dictem-postprocess-definition-hook
          'dictem-postprocess-definition-separator)

;; For creating hyperlinks in dictem buffer
;; that contains definitions.
(add-hook 'dictem-postprocess-definition-hook
          'dictem-postprocess-definition-hyperlinks)

;; For creating hyperlinks in dictem buffer
;; that contains information about a database.
(add-hook 'dictem-postprocess-show-info-hook
          'dictem-postprocess-definition-hyperlinks)

(define-key dictem-mode-map [tab] 'dictem-next-link)
(define-key dictem-mode-map [(backtab)] 'dictem-previous-link)

;(setq dictem-user-databases-alist
;      '(("_en-en"  . ("foldoc" "gcide" "wn"))))

;;; http://paste.lisp.org/display/89086
(defun dictem-run-define-at-point-with-query ()
  "Query the default dict server with the word read in within this function."
  (interactive)
  (let* ((default-word (thing-at-point 'symbol))
         (default-prompt (concat "Lookup Word "
                                 (if default-word
                                     (concat "(" default-word ")") nil)
                                 ": "))
         (dictem-query
          (funcall #'(lambda (str)
                       "Remove Whitespace from beginning and end of a string."
                       (replace-regexp-in-string "^[ \n\t]*\\(.*?\\)[ \n\t]*$"
                                                 "\\1"
                                                 str))
                   (read-string default-prompt nil nil default-word))))
    (if (= (length dictem-query) 0) nil
      (dictem-run 'dictem-base-search "*" dictem-query "."))))

(defun dictem-run-define-at-point ()
  "dictem look up for thing at point"
  (interactive)
  (let* ((default-word (thing-at-point 'symbol))
         (dictem-query
          (funcall #'(lambda (str)
                       "Remove Whitespace from beginning and end of a string."
                       (replace-regexp-in-string "^[ \n\t]*\\(.*?\\)[ \n\t]*$"
                                                 "\\1"
                                                 str))
                   default-word)))
    (if (= (length dictem-query) 0) nil
      (dictem-run 'dictem-base-search "*" dictem-query "."))))

(global-set-key "\C-cd" 'dictem-run-define-at-point)
(global-set-key "\C-cD" 'dictem-run-define-at-point-with-query)

;(global-set-key "\C-zs" 'dictem-run-search)
;(global-set-key "\C-zm" 'dictem-run-match)
)

(ome-install 'dictem)

#+END_SRC

* Todo
- Integrate [[https://github.com/ppareit/graphviz-dot-mode][graphviz-dot-mode]]
